// Streams of memory.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include "pch.h"
#include "My_names.h"
#include "Simple structures.h"
#include "Outer_stream.h"
#include "Inner_stream.h"
#include "Figures.h"
#include "Warning.h"
#include "Cluster.h"

using namespace My_names;

constexpr size_t Width = 120;//Константа, задающая ширину рабочего пространства.
constexpr size_t Height = 58;//Константа, задающая высоту рабочего пространства.
constexpr size_t Frames = 130;//Количество переданных в поток кадров.

void figure_moving(Square &, size_t);//Движение фигуры в зависимости от стадии цикла записи.

int main()
{
	system("pause");
	

	Square fig(10, 10, 10);//Фигура для демонстрации записи в поток.

	Outer_stream<Width, Height> ots(3);//Внешний поток заданной длины.
	Inner_stream ins(Width, Height, Frames - 2);//Внутренний поток.

	for (size_t i = 0; i < Frames; i++)//Цикл записи.
	{
		//УЧАСТОК ВВОДА ДАННЫХ ВО ВНЕШНИЙ ПОТОК /////////////////////////////////////////////////////////////////////////////////////////////////////////

		fig.print(ots.Input_frame());//Фигура отрисовывает себя на предоставленном потоком кадре ввода.

		//ots.print_input();//Отрисовка кадра ввода.

		ots.process();//Кадр ввода отправляется в поток.



		//УЧАСТОК УПРАВЛЕНИЯ ВНИМАНИЕМ ///////////////////////////////////////////////////////////////////////////////////////////////////

		//Focus_of_attention foc(10, 10, ar1);//Задаем начальное положение фокуса внимания.

		//Вектор для хранения предупреждений от функций управления вниманием внешнего потока.
		vector<Warning> warnings;

		//Простейшая функция управления вниманием. Выдает координаты кластера, в котором больше всего точек, отличных от фона. Файл Cluster.h
		Warning w1 = most_filled_cluster(ots.get_frame(0), ' ');

		//Заносим предупреждение в вектор.
		warnings.push_back(w1);

		if (i > 0)//Проверка нужна, т.к. в самом начале записи еще нет второго кадра потока.
		{
			//Простейшая ф-я управления вниманием. Выдает предупреждение с координатами кластера, в котором больше всего точек, состояние которых изменилось с прошлого кадра.
			Warning w2 = most_difference_in_cluster(ots.get_frame(0), ots.get_frame(1));
			//Заносим предупреждение в вектор.
			warnings.push_back(w2);
		}
		




		//НАЧАЛО РАБОТЫ ФИЛЬТРА ВОСПРИЯТИЯ. НА БУДУЩЕЕ. ПОКА НИЧЕГО НЕТ!

		//На будущее. Фильтр восприятия обрабатывает все предупреждения, корректируя их важность. 

		//После занесения всех предупреждений сортируем так, чтобы первым эл-том был тот, у кого наибольшая важность.
		sort(warnings.begin(), warnings.end(), [](const Warning & w1, const Warning & w2) {return w1.get_importance() > w2.get_importance(); });
		Warning most_important = warnings[0];

		//Передача данных от внешнего потока внутреннему. Пока без каких-либо ограничений и модификаций.

		//Внешний поток выдает свой нулевой кадр. 
		Outer_frame< Width, Height > outer_data = ots.get_frame(0);

		//Буфер для конвертации данных в формат кадра внутреннего потока.
		Inner_frame buffer;
		for (auto e : outer_data)//Конвертация.
		{
			buffer.emplace_back(e.cbegin(), e.cend());
		}

		//КОНЕЦ РАБОТЫ ФИЛЬТРА ВОСПРИЯТИЯ.

		//Ввод данных во внутренний поток.
		ins.Input_frame() = move(buffer);//Используется семантика перемещения.
		ins.process();




		//most_important.what();//Отладочный вывод.

		//system("cls");

		//Движение фигуры в зависимости от стадии цикла записи.
		figure_moving(fig, i);


		//УЧАСТОК ПОДГОТОВКИ К СЛЕДУЮЩЕМУ ЦИКЛУ СОЗНАНИЯ ///////////////////////////////////////////////////////////////////////////////

		warnings.clear();//Очищаем список предупреждений, чтобы заполнить его в следующем цикле.

		
	}

	ins.play(10);//Вывод содержимого потока в консоль.

	cout << "End...\n";

	return 0;
}

//Движение фигуры в зависимости от стадии цикла записи.
void figure_moving(Square & fig, size_t i)
{
	//Далее код для простейшего движения фигуры. Фигура пройдет по кругу за время цикла записи.
	if (i <= Frames / 4)
	{
		fig.moveRight();
	}
	else if (i <= Frames / 2)
	{
		fig.moveDown();
	}
	else if (i <= 0.75*Frames)
	{
		fig.moveLeft();
	}
	else
	{
		fig.moveUp();
	}
}

