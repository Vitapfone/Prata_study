// Streams of memory.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include "pch.h"
#include "My_names.h"
#include "Simple structures.h"
#include "Outer_stream.h"
#include "Figures.h"
#include "Warning.h"
#include "Cluster.h"

using namespace My_names;

constexpr size_t WIDTH = 120;//Константа, задающая ширину рабочего пространства.
constexpr size_t HEIGHT = 50;//Константа, задающая высоту рабочего пространства.
constexpr size_t FRAMES = 130;//Количество переданных в поток кадров.

int main()
{
	system("pause");
	

	Square fig(10, 10, 10);//Фигура для демонстрации записи в поток.

	Outer_stream<WIDTH, HEIGHT> test(100);//Поток заданной длины.

	for (size_t i = 0; i < FRAMES; i++)//Цикл записи.
	{
		//УЧАСТОК ВВОДА ДАННЫХ/////////////////////////////////////////////////////////////////////////////////////////////////////////

		fig.print(test.Input_frame());//Фигура отрисовывает себя на предоставленном потоком кадре ввода.

		test.print_input();//Отрисовка кадра ввода.

		test.process();//Кадр ввода отправляется в поток.



		//УЧАСТОК УПРАВЛЕНИЯ ВНИМАНИЕМ ///////////////////////////////////////////////////////////////////////////////////////////////////

		//Focus_of_attention foc(10, 10, ar1);//Задаем начальное положение фокуса внимания.

		//Вектор для хранения предупреждений от функций управления вниманием внешнего потока.
		vector<Warning> warnings;

		//Простейшая функция управления вниманием. Выдает координаты кластера, в котором больше всего точек, отличных от фона. Файл Cluster.h
		Warning w1 = most_filled_cluster(test.get_frame(test.get_size()-1), ' ');

		//Заносим предупреждение в вектор.
		warnings.push_back(w1);

		//После занесения всех предупреждений сортируем так, чтобы первым эл-том был тот, у кого наибольшая важность.
		sort(warnings.begin(), warnings.end(), [](const Warning & w1, const Warning & w2) {return w1.get_importance() > w2.get_importance(); });
		Warning most_important = warnings[0];

		most_important.what();//Отладочный вывод.

		system("cls");




		//УЧАСТОК ПОДГОТОВКИ К СЛЕДУЮЩЕМУ ЦИКЛУ СОЗНАНИЯ ///////////////////////////////////////////////////////////////////////////////

		warnings.clear();//Очищаем список предупреждений, чтобы заполнить его в следующем цикле.

		//Далее код для простейшего движения фигуры. Фигура пройдет по кругу за время цикла записи.
		if (i <= FRAMES / 4)
		{
			fig.moveRight();
		}
		else if (i <= FRAMES / 2)
		{
			fig.moveDown();
		}
		else if (i <= 0.75*FRAMES)
		{
			fig.moveLeft();
		}
		else
		{
			fig.moveUp();
		}
	}

	//test.play(10);//Вывод содержимого потока в консоль.

	cout << "End...\n";

	return 0;
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
